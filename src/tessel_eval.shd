#version 450

layout (quads, equal_spacing, ccw) in;

in vec3 colorTess[gl_MaxPatchVertices];
out vec3 color;
out float diffuse;
out vec4 gs_normal;

uniform mat4 model_matrix;
uniform mat4 view_matrix;
uniform mat4 projection_matrix;
const vec3 lightpos = vec3(10, 20, -30);

uniform float anim_time;

float elevation(float x, float y) {
    float elevation1 = 0.04 * sin((3 * x - 2.2 * y) * 3.14159 + anim_time);
    float elevation2 = 0.013 * sin((4 * y) * 3.14159 - 0.3 * anim_time);
    float elevation3 = 0.02 * sin((2 * y + 1.5 * x) * 3.14159 + 0.2 * anim_time);
    return elevation1 + elevation2 + elevation3;
}

const float delta = 0.0001;

void main() {
    vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
    vec4 p2 = mix(gl_in[3].gl_Position, gl_in[2].gl_Position, gl_TessCoord.x);
    vec4 p = mix(p1, p2, gl_TessCoord.y);

    float e = elevation(gl_TessCoord.x, gl_TessCoord.y);
    p = p + vec4(0.0, 1.0, 0.0, 0.0) * e;

    vec3 dx = vec3(delta, elevation(gl_TessCoord.x + delta, gl_TessCoord.y) - e, 0.0);
    vec3 dy = vec3(0.0, elevation(gl_TessCoord.x, gl_TessCoord.y + delta) - e, delta);
    vec3 normal = normalize(cross(dy, dx));
    diffuse = clamp(dot(normalize(lightpos - vec3(p)), normal), 0.0, 1.0);

    gl_Position = projection_matrix * view_matrix * model_matrix * p;
    vec3 c1 = mix(colorTess[0], colorTess[1], gl_TessCoord.x);
    vec3 c2 = mix(colorTess[3], colorTess[2], gl_TessCoord.x);
    color = mix(c1, c2, gl_TessCoord.y);

    gs_normal = projection_matrix * view_matrix * model_matrix * vec4(normal, 0.0);
}